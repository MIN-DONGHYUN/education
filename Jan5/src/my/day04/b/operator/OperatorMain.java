package my.day04.b.operator;

public class OperatorMain {

	public static void main(String[] args) {
		// ~~~~~~~~~ 연산자 ~~~~~~~~~~~~~~ //
		
		// #### 1. 산술 연산자 #### //
		//   +,  -,  *,  /,  %(나머지),  <<,    >>,    >>>   가 있다.
		
		System.out.println("=== 1. 산술연산자  +,  -,  *,  /,  %(나머지),  <<,    >>,    >>> 대해 알아보자");
		
		int n = 10;
		System.out.println("n+3 :" + (n+3));  //n+3 으로 사용하면 n+3=103, (n+3)= 13으로 나옴
											// 문자열결합 + 숫자 + 문자열결합은 그냥 모두 문자열결합됨
											// ()안을 먼저 수행하기 때문에 (n+3)=13으로 계산되고 문자열 결합한다.
		
		System.out.println("n-3 :" + (n-3));  // n-3 = 7
		System.out.println("n*3 :" + (n*3));  // n*3 = 30
		System.out.println("n/3 :" + (n/3));  // n/3 = 3  정수 / 정순 = 정수(몫)
		System.out.println("(double)n/3 :" + ((double)n/3));  // (double)n/3 :3.3333333333333335 (15~16자리까지)
		System.out.println("(float)n/3 :" + ((float)n/3));  // (float)n/3 :3.3333333 (7자리까지)
		System.out.println("n%3 :" + (n%3));  // n%3 = 1  10을 3으로 나누었을때의 나머지를 말한다.
		
		
		//////////// 쉬프트 연산자 ////////////
		
		System.out.println("n<<3 = " + (n<<3)); //n<<3 = 80
		/*
		   << 는 부를때 왼쪽 쉬프트 연산자라고 부른다.
		   
		   int 는 4byte이므로 32bit로 구성된다.
		   10<<3은 
		   정수 10을 이진수 00000000 00000000 00000000 00001010으로 나타낸다. (공백없이)
		   <<3 은 왼쪽 방향으로 3개 가라는 뜻이다.(<<2 는 왼쪽으로 2개) (3개를 밀어버린다.)
		   00000000 00000000 00000000 01010000 으로 바뀐다. (앞쪽 3개는 삭제)(뒤에는 0추가)
		   1*(2의 6승) + 1*(2의 4승) = 64 + 16 = 80
		   즉 위의 결과값을 10진수로 나타내면 80이 나온다.
		   
		   이것은 10 *(2의 3승) ==> 10*(2의3승)과 같은 것이 된다. 그러므로 80이다.
		   (10은 n을 지칭함)
		 */
		
		System.out.println("n>>2 = " + (n>>2)); //n>>2 = 2
		/*
		   >>는 오른쪽 쉬프트 연산자 
		   int 는 4byte이므로 32bit로 구성된다.
		   10>>2은 
		   정수 10을 이진수 00000000 00000000 00000000 00001010으로 나타낸다. (공백없이)
		   >>2 은 오른쪽 방향으로 2개 가라는 뜻이다.(2개를 밀어버린다.)
		   00000000 00000000 00000000 00001010에서 오른쪽으로 2개 밀어버리면
		   __00000000 00000000 00000000 000010가 되는데 
		   __자리에 정수 10의 부호비트(가장 왼쪽 비트1개, 0이면 양수이고, 1이면 음수를 말하는 것이다)와 같은 값으로 채운다.
		   
		   즉 00000000 00000000 00000000 00000010으로 변경된다.(뒤 두자리 삭제, 앞 2자리 0으로채워짐)
		   이진수 00000000 00000000 00000000 00000010이므로 10진수로 나타내면 
		   1*(2의1승) = 2이 된다.
		   
		   이것은 n값이 10, 10 / (2의2승) ==> 10/(2의2승)와 같은 것이 된다. 그러므로 10/4는 몫이 2이므로 2가 나온다.

		 */
		
		System.out.println("n>>>3 = " + (n>>>3)); //n>>>3 = 1
		/*
		   >>> 는 오른쪽 쉬프트 연산자
		   int 는 4byte이므로 32bit로 구성된다.
		   10>>>3은 
		   정수 10을 이진수 00000000 00000000 00000000 00001010으로 나타낸다. (공백없이)
		   >>>3 은 오른쪽 방향으로 3개 가라는 뜻이다.(3개를 밀어버린다.)
		   00000000 00000000 00000000 00001010에서 오른쪽으로 2개 밀어버리면
		   ___00000000 00000000 00000000 00001이 되는데 
		   그런 다음에 _자리에는 0으로 채운다.
		   즉, 00000000000 00000000 00000000 00001이된다.
		   이진수 00000000 00000000 00000000 00000001이므로 10진수로 나타내면
		   1*(2의0승) = 1*1 = 1이된다.
		   그러므로 1이다.
		 */
		
		/////////// 음수일경우 ///////////////
		
		n = -10;
		System.out.println("~~~~n이 -10인 경우 ~~~~");
		/*
		 	>>> -10을 bit로 나타내어 주는 방법
		 	
		 	int 는 4byte이므로 32bit로 구성한다.
		 	컴퓨터의 음수표현 방법은 2의 보수 표현 방법을 사용한다.
		 	2의 보수란 1의 보수(0은 1로, 1은 0으로 바꿔주는 것을 말한다.)로 변환 후 +1을 해주는 것이다.
		 	
		 	-10 을 이진수로 표현을 하면 다음과 같다.
		 	우선 10을 2진수로 나타내면 00000000 00000000 00000000 00001010으로 나타낸다. (공백없이)
		 	그것을 1의 보수로 변경하면 11111111 11111111 11111111 11110101으로 바뀐다.
		 	+1로 2의 보수로 변경한다면 11111111 11111111 11111111 11110110 으로 변경된다.
		 	
		 	11111111 11111111 11111111 11110110 을 10진수로 나타내어 보겠다.
		 	
		 	첫번째 bit는 부호비트로 사용되어지는데 
		 	0은 +임(양수)를 의미하고, 1은 -임(음수)을 의미한다.
		 	
		 	첫번째 bit가 1인 경우, 즉 음수를 뜻할 경우에는 아래와 같이 구한다.
		 	똑같은 1이 나오는 것 중에서 마지막 1만 취하고, 여기에다가 그 나머지를 끝까지 취한다.
		 	
		 	11111111 11111111 11111111 11110110에서 
		 	10110만 취한다.
		 	
		 	첫번째 값만 -를 붙이고, 나머지 값은 +로 연산을 하면 된다.
		 	1 0 1 1 0 에서 -1 +0 +1 +1 +0로 계산한다.
		 	-1*(2의 4승) + 0*(2의3승) + 1*(2의2승) + 1*(2의 1승) + 0*(2의0승) 이다.
		 	-1*16 + 0 + 1*4 + 1*2 + 0 = -16 + 4 + 2 이므로 -10이라는 결과가 나온다.
		 	 
		 */
		
		System.out.println("n<<3 = " + (n<<3)); //n<<3 = 80
		/*
		   << 는 부를때 왼쪽 쉬프트 연산자라고 부른다.
		   
		   int 는 4byte이므로 32bit로 구성된다.
		   -10<<3은 
		   정수 -10을 이진수 11111111 11111111 11111111 11110110으로 나타낸다. (공백없이)
		   <<3 은 왼쪽 방향으로 3개 가라는 뜻이다.(<<2 는 왼쪽으로 2개) (3개를 밀어버린다.)
		   11111 11111111 11111111 11110110___ 으로 바뀐다. 
		   그런 다음에 _ 자리에 0으로 채워주면 11111111 11111111 11111111 10110000 이다.
		   이진수 11111111 11111111 11111111 10110000 이 되는데 이것을 10진수로 나타내면 
		   음수 이므로 마지막 1부터 나머지를 취하면 10110000이다.
		   
		   맨 첫글자만 -로 하고 다 더한다.
		   -1 +0 +1 +1 +0 +0 +0 +0
		   -1*(2의7승) + 0*(2의6승) + 1*(2의5승) + 1*(2의4승)
		   -128 + 32 + 16 = -80 		   
		 */

		//-10 * (2의3승) = -10 * 8 = -80
	    
		System.out.println("n>>2 = " + (n>>2)); //n>>2 = -10 / (2의2승) = 2(정수로만 표현)
		
		/*
		    >>는 오른쪽 쉬프트 연산자 
		   int 는 4byte이므로 32bit로 구성된다.
		   -10>>2은 
		   정수 -10을 이진수 11111111 11111111 11111111 11110110으로 나타낸다. (공백없이)
		   >>2 은 오른쪽 방향으로 2개 가라는 뜻이다.(2개를 밀어버린다.)
		   11111111 11111111 11111111 11110110에서 오른쪽으로 2개 밀어버리면
		   __11111111 11111111 11111111 111101가 되는데 
		   __자리에 정수 -10의 부호비트(가장 왼쪽 비트1개, 0이면 양수이고, 1이면 음수를 말하는 것이다)와 같은 값으로 채운다.
		   음수이므로 1로 채운다.
		   
		   즉 1111111111 11111111 11111111 111101으로 변경된다.(뒤 두자리 삭제, 앞 2자리 1으로채워짐)
		   이진수 11111111 11111111 11111111 11111101이므로 10진수로 나타내면 
		   음수이므로 1이 연결되는 마지막과 남은부분을 나타내면 101이다.
		   
		   101 = -1*(2의2승) + 0*(2의1승) + 1*(2의0승) = -4 + 0 + 1 = -3이다.
		   
		 */
		
		System.out.println("n>>>3 = " + (n>>>3)); //n>>>3 = 536870910
		/*
		   >>> 는 오른쪽 쉬프트 연산자
		   int 는 4byte이므로 32bit로 구성된다.
		   -10>>>3은 
		   정수 10을 이진수 11111111 11111111 11111111 11110110으로 나타낸다. (공백없이)
		   >>>3 은 오른쪽 방향으로 3개 가라는 뜻이다.(3개를 밀어버린다.)
		   11111111 11111111 11111111 11110110에서 오른쪽으로 3개 밀어버리면
		   ___11111111 11111111 11111111 11110이 되는데 
		   그런 다음에 _자리에는 0으로 채운다.
		   
		   즉, 00011111111 11111111 11111111 11110이된다.
		   이진수 00011111 11111111 11111111 11111110이므로 10진수로 나타내면
		   즉, 536870910이 된다.
		 */
		
		
		////////////2. 증감 연산자 ////////////
		// #### 2. 증감 연산자 #### //
		//   ++       --
		System.out.println("\n=== 2. 증감 연산자 ++ -- 대해 알아보자");
		
		//int a=7;
		//int b=3;
		//또는
		int a=7, b=3;
		System.out.println("a => " + a);  // a => 7
		
		// a = a+1;
		//또는
		a++;
		System.out.println("a => " + a); // a => 8
		
		
		++a;
		System.out.println("a => " + a); // a => 9
		
		
		System.out.println("b => " + b); // b => 3
		// b = b-1;
		// 또는
		b--;
		System.out.println("b => " + b); // b => 2
		
		--b;
		System.out.println("b => " + b); // b => 1
		
		
		//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! 꼭 암기하세요 !!!!!!!!!!!!!!!!!!!!!!!!!!!!
		/*
		   후위증감연산자(a++; b--;)는 다른 연산을 다 마친 이휴에 1씩 증감한다.
		   전위증감연산자(++a; ++b;)는 맨 먼저 1씩 증감한 이후에 다른 연산을 한다.
		*/
		
		int x=10, y =10;
		int z=++x;     // ++x; ==> x=x+1;  ==> x=11;
		               // z=x;    z=11;
		System.out.println("z => " + z);  // z = 11
		System.out.println("x => " + x);  // x = 11
		
		z=y++;  // x=y;  ==>  y++; ==> y = y + 1 ==> y=11;
		System.out.println("z => " + z);  // z = 10
		System.out.println("y => " + y);  // y = 11
		
		
		
		
		////////////3. bit별 not 연산자 ////////////
		// #### 3. bit별 not 연산자 #### //
		
		System.out.println("\n=== 3. bit별 not 연산자 ~ 대해 알아보자");
		/*
		    주어진 정수값을 32bit 형태의 2진수로 바꾸어서 나타내는데 
		    0bit는 1bit로 바꾸고, 1bit는 0bit로 바꾸어 주는 것이다. 
		*/
		
		int m =42;
		System.out.println("~m : " + ~m);  //~m: -43
		/*
		   이진수 00000000 00000000 00000000 00101010 <= 십진수 42
		   이진수 11111111 11111111 11111111 11010101 <= 십진수 ~42
		   
		   첫번째 bit는 부호비트로 사용되어지는데 
		   0은 +임(양수)을 의미하고,
		   1은 -임(음수)을 의미한다.
		   
		   1010101
		   
		   첫번째 값만 -를 붙이고, 나머지 값은 +로 연산을 하면 된다.
		   -1*(2의 6승)+  0*(2의 5승) + 1*(2의 4승) + 0*(2의 3승) + 1*(2의 2승) + 0*(2의 1승) + 1*(2의 0승)
		   -1*(2의 6승)+ 1*(2의 4승) + 1*(2의 2승) + 1*(2의 0승)
		   -64 + 16 + 4 + 1 =  -43 
		*/
		
		
		
		////////////4. 논리 부정 연산자 ////////////
		// #### 4. 논리 부정 연산자 #### //
		
		System.out.println("\n=== 4. 논리 부정 연산자 ! 대해 알아보자");
		boolean bool = false;
		System.out.println("bool : " + bool); // bool : false
		System.out.println("!bool : " + !bool); // !bool : true
		
		
		////////////5. bit 연산자 ////////////
		// #### 5. bit 연산자 #### //
		//   &(엠퍼센트)   |(파이프)   ^(꼬깔)  이 있다.
		
		System.out.println("\n=== 5. bit 연산자 &  |  ^ 대해 알아보자");
		/*
		   & (and 연산자) ===> 2개 bit 모두 1일때만 1, 나머지는 0
		   | (or 연산자) ===> 2개 bit 중에서 적어도 1개가 1이면 1, 모두0이면 0
		   ^ (xor 연산자) ===> 2개 bit 중에서 서로 달라야만 1, 같으면 0
		   
		   &  |   ^ 연산자는 연산되어지는 대상이 정수일때만 사용 가능하다.
 		*/
		int x1 =3,  y1=5;
		System.out.println("x1 & y1 => " + (x1 & y1));  //x1 & y1 => 1
		/*
		     00000011 <== 3
		   & 00000101 <== 5
		   ------------------
		     00000001 <== 1
		*/
		
		System.out.println("x1 | y1 => " + (x1 | y1));  //x1 | y1 => 7
		/*
	     	  00000011 <== 3
	   		| 00000101 <== 5
	   		------------------
	          00000111 <== 7
	    */
		System.out.println("x1 ^ y1 => " + (x1 ^ y1));  //x1 ^ y1 => 6
		/*
	     	   00000011 <== 3
	   		 ^ 00000101 <== 5
	   		------------------
	     	   00000110 <== 6
	    */
		
		
		
		
		
		////////////6. 논리 연산자 ////////////
		// #### 6. 논리 연산자 #### //
		//   &   |   &&   ||    (결과물은 같지만 연산처리 속도에서 문제가 있다 두개가 더 연산이 빠르다)
		// 비교 대상값이 boolean 타입에서 사용되어진다. 
		
		System.out.println("\n=== 6. 논리 연산자 & | && || 대해 알아보자");
		/*
		   수학에서는 T ∧ T ∧ F ==> F    ∧ 는 and
		   수학에서는 T ∧ T ∧ T ==> T
		   
		   수학에서는 T ∨ T ∨ F ==> T    ∨ 는 or
		   수학에서는 T ∨ T ∨ T ==> T
		   수학에서는 F ∨ F ∨ F ==> F
		   
		*/
		int c=50, d=60, e=70;
		
		// &, | 가 두개일때 
		bool = (c > d) && (d < e) && (c == 3);
		//      false  && 스킵(SKIP)   ==>false
		System.out.println("bool => " + bool);
		
		
		bool = (c > d) || (d < e) || (c == 3);
		//     false   ||  true   ||  스킵(SKIP)  ==>true
		System.out.println("bool => " + bool);
		
		
		
		System.out.println("~~~~~~~~~~~~~~~~~~~~");
		
		
		
		// &, | 가 두개가 아니라 1개일때 
		bool = (c > d) & (d < e) & (c == 3);
		//      false  &   True  &   false     ==>false
		System.out.println("bool => " + bool);
		
		
		bool = (c > d) | (d < e) | (c == 3);
		//     false   |  true   |  flase   ==>true
		System.out.println("bool => " + bool);
		
		
		
		
		
		//////////////////// 퀴즈 ///////////////////////
		System.out.println("\n ~~~~~~~~~ 퀴즈 1 ~~~~~~~~\n");
		int i = 1;
		int j = i++;    // j=1; i++; i=>2
		
		if((i> ++j) & (i++ == j)) {
	    //  2>  2      2   == 2
		//  false   &   true   ===>false
		//            false    i ==> 3됨   	
			i = i+j;     // i = 3+2;  but if문 false로 안됨
		}
		System.out.println("i=" +i);  // i= 3
		
		i=1;     //i=1
		j=i++;   //j=1 , i=2
		
		if((i> ++j) && (i++ == j)) {
		//  2 > 2   && skip
		//  false   && skip
		//              false    i ==> 2 
			i = i+j;  // false 이기때문에 skip
		}
		System.out.println("i=" +i);  // i= 2
		
		
		System.out.println("\n ~~~~~~~~~ 퀴즈 2 ~~~~~~~~\n");
		
		int m1=0, n1=1;   //m1=0, n1=1
		
		if((m1++ == 0) | (n1++ ==2)) {
		//  0    == 0  |  1   == 2
		//   true      |    false (false이지만 후위증감이므로 n1이 +1)
		//               true     m1=1, n1=2
			m1=42;       //m1=42
		}
		
		System.out.println("m1=>" + m1 + ", n1 =>" + n1);  // m1 => 42  , n1 => 2 
		
		m1=0;   //m1=0, n1=1
		n1=1;
		
		if((m1++ == 0) || (n1++ ==2)) {
		//  0    == 0  ||  skip
		//    true     ||  skip
		//            true    m1= 1  n1=1
			m1=42;    //  m1=42
		}
		System.out.println("m1=>" + m1 + ", n1 =>" + n1);  // m1 => 42  , n1 => 1
		
					
		
		
		
		////////////7. 비교 연산자 ////////////
	    // #### 7. 비교 연산자 #### //
		
		//    == 같다   != 같지않다.  >,  < ,  >=,   <=
		
		
		
		////////////8. 할당 연산자 ////////////
		// #### 8. 할당 연산자(연산후 대입 연산자) #### //
	
		//    +=   -=   /=   %=   *=
		
		System.out.println("\n === 8. 할당 연산자(연산후 대입 연산자)  +=  -=  *=  /*  %= ");

		int no = 1;
		no += 3;  // no= no + 3;와 같은 것이다. no = 4
		System.out.println("no => " + no);
		
		no -= 2; // no = no - 2;
		System.out.println("no => " + no); //4 - 2 = 2;
		
		no *= 5; // no = no * 5;
		System.out.println("no => " + no); //2 * 5 = 10;
		
		no /= 4; // no = no / 4;
		System.out.println("no => " + no); //10 / 4 = 2;(몫만 나옴)
		
		no %= 3; // no = no % 3;
		System.out.println("no => " + no); //2 % 3 = 2;
		
		
		
		
		////////////9. 삼항 연산자 ////////////
		// #### 9. 삼항 연산자 #### //
		
		/*
		   변수선언 = (조건식)?값1:값2;
		   
		   변수를 선언하고 나서 값을 부여하고자 할때 사용되어지는데 조건식이 참 이라면 변수에 값1 을 대입해주고,
		   만약에 조건식이 거짓이라면 변수에 값2를 대입해주는 것이다.
		   
		*/
		System.out.println("\n==== 9. 삼항 연산자 ====");
		int num1=50, num2=60;
		int num3=(num1 > num2)?num1:num2;  //삼항연산자 사용 
		//           false
		//   num3=num2;
		
		System.out.println("num3 => " + num3); // num3 = 60;
		
	}//end of public static void main(String[] args)

}
