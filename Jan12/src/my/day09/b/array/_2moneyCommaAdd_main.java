package my.day09.b.array;

import java.text.DecimalFormat;
import java.util.Scanner;

import my.util.MyUtil;

public class _2moneyCommaAdd_main {
	
	/*
	   > 금액을 입력하세요(정수로만) ==> 1234567890 (엔터)
	   1,234,567,890 원
	   
	    > 금액을 입력하세요(정수로만) ==> 123 (엔터)
	    123 원
	*/

	public static void main(String[] args) {
		
		Scanner sc = new Scanner(System.in);		// Scanner사용을 위해 (키보드 사용)

		System.out.print("> 금액을 입력하세요(정수로만) ==> ");  // "      123 4567890    "처럼 쓴다면
														  // "1234567890"으로 변경 
														  // " 123a4567890  "는 정수가 아니므로 잘못 넣어진 것
														  // "123ㅁ4567890"
		
		//String str = null;  // null이여야만 null이 나옴 
		String str = MyUtil.space_delete(sc.nextLine());  // 키보드에서 입력받은 문자를 공백을 없애기 위헤 MyUtil에 있는것을 끌어다 씀
		// 스케너로부터 입력받기 때문에 엔터를 무조건 치기 때문에 null이 나오지 않음 
		
		
		if(str.length() > 0)
		{
			char[] chArr = str.toCharArray();  // 배열에 각각의 문자열 넣는다.
			
			boolean b_flag = true;     // 흔적을 남기기 위해  
			
			for(int i = 0; i < chArr.length; i++)
			{
				if( !Character.isDigit(chArr[i]) )// 숫자이라면 true, 아니라면 false 
										       // 만약 글자가 숫자가 아니라면 
				{
					System.out.println(">>[경고] 금액은 숫자로 되어야 합니다!! <<");
					b_flag = false;	// 흔적을 거짓으로 남긴다.
					break;  //for문을 탈출 !
				}
			}// end of for
			
			if(b_flag == true)		// 흔적이 참이라면 // b_flag = true로 사용하면 안됨??? 
			{
				//3자리 마다 콤마를 넣어주기 위해 아래코드를 사용한다.
				
				// 1234567890 원 => 1,234,567,890 원  234567890 원 => 234,567,890 원
				//문자열 길이 10,                      길이 9
				// 길이 10/3 = 3 (콤마 필요개수)         길이 9/3 = 3 (콤마 필요 개수) but 2개만 필요
				// 즉 3의 배수일때는 1를 빼줘서 콤마의 개수를 맡추자 
				// 길이가 3의 배수인지를 알아봐야한다.  길이 % 3 == 0 이면 3의 배수인 것이다.
				//   10%3 != 0                      9%3 == 0  ==> 3-1 을 해준다.
				// 콤마의 개수 3개                      2개
				
				int len = str.length();  // 문자열의 길이를 len에 저장한다.
				int commaCount = len/3; // 콤마 몇개필요한지 보기위해 설정
				
				if(len%3 == 0)   //str 길이가 3의 배수인가?
				{
					commaCount -= 1; // 콤마 카운트에서 1을 빼자 
				}
				
				char[] inputChArr = str.toCharArray(); // 문자열을 배열로 빼버린다. 
				/*
				   그림을 그려본다.
				   ----------------------------------------------------     --------------------------------------------------
				   데이터값 => |'1'|'2'|'3'|'4'|'5'|'6'|'7'|'8'|'9'|'0'|       데이터값 => |'2'|'3'|'4'|'5'|'6'|'7'|'8'|'9'|'0'|
				   ----------------------------------------------------     --------------------------------------------------
				   index =>    0   1   2   3   4   5   6   7   8   9                    0    1  2    3   4  5   6   7    8
				*/
				
				char[] outputChArr = new char[len+commaCount]; // 콤마가 들어갈 인덱스 를 원래 문자열 길이에 더한다. (공백으로 들어가있음)
				/*
				   그림을 그려본다.
				   -------------------------------------------------------------------     ------------------------------------------------     -
				   데이터값 => |' '|' '|' '|' '|' '|' '|' '|' '|' '|' '|' '|' '|' '|         |' '|' '|' '|' '|' '|' '|' '|' '|' '|' '|' '|
				   -------------------------------------------------------------------     ------------------------------------------------    
				   index =>    0   1   2   3   4   5   6   7   8   9  10  11  12            0    1   2   3   4   5   6   7   8   9  10
				   
				   
				   ---------------------------------------------------------------      --------------------------------------------------------
				   데이터값 => |'1'|','|'2'|'3'|'4'|','|'5'|'6'|'7'|','|'8'|'9'|'0'|       데이터값 => |'2'|'3'|'4'|','|'5'|'6'|'7'|','|'8'|'9'|'0'|
				   ---------------------------------------------------------------      --------------------------------------------------------  
				   index =>   0   1   2    3   4   5   6   7   8   9   10  11  12                    0  1    2  3   4   5   6   7    8   9  10
				
				콤마가 들어올  => 9번 5번 1번 즉 4의 배수마다 콤마가 찍힌다.!!!!                     7번 3번 
				index
				*/
				
				int cnt = 0;  // 반복하는 회수
				
				for(int i = outputChArr.length - 1, j = inputChArr.length - 1; i >= 0; i--,j-- )  //초기치에 배열보다 1을 빼서 시작하며 반복때마다 1뺀다. (뒤에서부터 시작하기 때문에) 
				{																			      // j는 원래값 inputChArr길이에서 1을 빼준것으로 초기를 설정한다.
					cnt++;   // 반복할때마다 1증가 
					
					if(cnt % 4 != 0) // 반복회수가 4의배수가 아니라면 값을 넣어준다.
					{
						outputChArr[i] = inputChArr[j];  // inputChArr은 원래 기존 값이고 outputChArr에 대입해준다. 
														 // i <= 12, j <= 9 가 초기라면
														 // i <= 11, j <= 8
														 // i <= 10, j <= 7
					}
					else	// cnt가 4의 배수이라면 
					{
						j++;  //j를 감소시키지 않기 위해 j++로 유지시켜준다.  ','를 넣어줘야하기 때문에 
						
						outputChArr[i] = ',';   // 4의 배수일때 ,를 넣어줘라
												// j++를 안해주면 
												// i <= 9, j <= 6 이 되면 안됨 j를 빼주면 다른 값이 나오게 됨 
											    // 즉 i <= 9 , j <= 7 이 되어야 한다.
					}
					
				}// end of for 
				
				String result = "";								// 결과값 받아오기 위해
				for(int i = 0 ; i <outputChArr.length; i++)		// outputChArr만큼 반복
				{
					result += outputChArr[i];					// 결과값 대입
				}
			
				System.out.println(result + " 원");	// 출력 
				
				//String.valueOf 사용, 메소드를 써온것이다.
				System.out.println(String.valueOf(outputChArr) + " 원");	// 출력 
			}
			
		}
		else
		{
			System.out.println(">> [경고] 금액을 올바르게 입력하세요!! << \n");
		}
		
		
		
		System.out.println("\n~~~~~~~~~~~~~~~~~~~~~~\n");
		
		
		System.out.print("@ 금액을 입력하세요(정수로만) ==> ");
		
		long money = Long.parseLong(MyUtil.space_delete(sc.nextLine()));		//롱타입으로 변경하고 MyUtil로 공백제거 
		
		DecimalFormat df = new DecimalFormat("#,###"); // 3자리 마다 ,를 찍어줄것이다.
		String str_money = df.format(money);		// money를 포맷하고 Str_money에 넣어줌
		
		System.out.println(str_money + "원");
		
		sc.close();
		System.out.println("\n>> 프로그램 종료 <<");
	}

}
